"""
2차원 세계에 블록이 쌓여있다. 비가 오면 블록 사이에 빗물이 고인다.
비는 충분히 많이 온다. 고이는 빗물의 총량은 얼마일까?

input : 첫 번째 줄에는 2차원 세계의 세로 길이 H과 2차원 세계의 가로 길이 W가 주어진다. (1 ≤ H, W ≤ 500)

두 번째 줄에는 블록이 쌓인 높이를 의미하는 0이상 H이하의 정수가 2차원 세계의 맨 왼쪽 위치부터 차례대로 W개 주어진다.

따라서 블록 내부의 빈 공간이 생길 수 없다. 또 2차원 세계의 바닥은 항상 막혀있다고 가정하여도 좋다.

output : 2차원 세계에서는 한 칸의 용량은 1이다. 고이는 빗물의 총량을 출력하여라.

빗물이 전혀 고이지 않을 경우 0을 출력하여라.
"""

height, width = map(int, input().split())
block = list(map(int, input().split()))

# 고이는 빗물~
rain = 0

# 제일 처음 block과 마지막 block은 뚫려있어서 빗물이 안 고이므로 제외
for i in range(1, width-1):
  left = max(block[:i]) # 현재 index 기준 왼쪽에서 가장 큰 높이
  right = max(block[i:]) # 현재 index 기준 오른쪽에서 가장 큰 높이

  low = min(left, right) # 현재 위치에서 물이 잠길 수 있는 최소 높이
  
  # 현재 위치의 높이와 최소 높이 비교해서 잠기는 높이 확인
  # 현재 위치 높이가 최소 높이보다 크거나 같으면 안고이므로 0임
  rain += max(0, low - block[i])

print(rain)
